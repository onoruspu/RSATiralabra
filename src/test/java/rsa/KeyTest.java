
package rsa;

import java.math.BigInteger;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class KeyTest {
    
    private Boolean hasSameNumbers(BigInteger BI1, BigInteger BI2) {
        return BI1.equals(BI2);
    }
    
    @Test
    public void testKey() {
        Key key0 = new Key(new BigInteger("0"), new BigInteger("0"), new BigInteger("0"));
        assertTrue(hasSameNumbers(new BigInteger("0"), key0.getN()));
        assertTrue(hasSameNumbers(new BigInteger("0"), key0.getE()));
        assertTrue(hasSameNumbers(new BigInteger("0"), key0.getD()));
        
        Key key1 = new Key(new BigInteger("24095681039462341"), new BigInteger("10010101011101010101011"), new BigInteger("12312577791723777712"));
        assertTrue(hasSameNumbers(new BigInteger("24095681039462341"), key1.getN()));
        assertTrue(hasSameNumbers(new BigInteger("10010101011101010101011"), key1.getE()));
        assertTrue(hasSameNumbers(new BigInteger("12312577791723777712"), key1.getD()));
        
        Key key2 = new Key(new BigInteger("4462614641156714134324465427255425474252349820934892034809238490280938209358723847198237192371204987298572985739084759837489536134560147645385758310136264749813"),
                new BigInteger("4874098752489753984579831347895719834798407589123748293759123472857084372987435982346374524557132590346425432542452465234524566544256724524573171345619384543615"),
                new BigInteger("4565564564161354685341456145614614551136455416576149479417341585769113645114519826196141859631698641139654385459411964541968134146796516941329686441962431512312"));
        assertTrue(hasSameNumbers(new BigInteger("4462614641156714134324465427255425474252349820934892034809238490280938209358723847198237192371204987298572985739084759837489536134560147645385758310136264749813"), key2.getN()));
        assertTrue(hasSameNumbers(new BigInteger("4874098752489753984579831347895719834798407589123748293759123472857084372987435982346374524557132590346425432542452465234524566544256724524573171345619384543615"), key2.getE()));
        assertTrue(hasSameNumbers(new BigInteger("4565564564161354685341456145614614551136455416576149479417341585769113645114519826196141859631698641139654385459411964541968134146796516941329686441962431512312"), key2.getD()));
    }
}
